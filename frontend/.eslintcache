[{"C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\index.js":"1","C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\App.js":"2","C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\components\\Entete.js":"3","C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\components\\Maincon.js":"4","C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\components\\Sidenav.js":"5","C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\components\\Displayer.js":"6","C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\Contexts\\Linkcontext.js":"7","C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\components\\Diagram.js":"8","C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\Contexts\\Modalcontext.js":"9","C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\components\\Connect.js":"10","C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\components\\Tableview.js":"11","C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\components\\Mininav.js":"12","C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\components\\Diholder.js":"13"},{"size":220,"mtime":1610922747000,"results":"14","hashOfConfig":"15"},{"size":496,"mtime":1615023790840,"results":"16","hashOfConfig":"15"},{"size":580,"mtime":1615023561554,"results":"17","hashOfConfig":"15"},{"size":314,"mtime":1613730941668,"results":"18","hashOfConfig":"15"},{"size":1093,"mtime":1614816009813,"results":"19","hashOfConfig":"15"},{"size":544,"mtime":1615023014626,"results":"20","hashOfConfig":"15"},{"size":961,"mtime":1613689411735,"results":"21","hashOfConfig":"15"},{"size":1129,"mtime":1615046881596,"results":"22","hashOfConfig":"15"},{"size":371,"mtime":1612743741656,"results":"23","hashOfConfig":"15"},{"size":3088,"mtime":1615027955430,"results":"24","hashOfConfig":"15"},{"size":2327,"mtime":1615068058867,"results":"25","hashOfConfig":"15"},{"size":468,"mtime":1615022924989,"results":"26","hashOfConfig":"15"},{"size":1738,"mtime":1615108696827,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"w1yxuy",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"30"},"C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\index.js",[],["61","62"],"C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\App.js",[],"C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\components\\Entete.js",["63"],"import React, {useContext} from 'react'\nimport {Modalcontext} from '../Contexts/Modalcontext'\n\n\nconst Entete = () => {\n\n  //modal pour formulaire de connection\n  const [showModal, setShowModal] = useContext(Modalcontext)\n\n  //avec cette fonction je change la valeur de faux a vrai en fonction de la position du modal\n  const openModal = (e) =>{\n    setShowModal(prev => !prev)\n  }\n\n  return (\n    <div className=\"entete\">\n      <h1>GUI <span>Tool</span></h1>\n      \n      \n\n\n      <button id=\"btn\" onClick={openModal}>Se Connecter</button>\n    </div>\n  )\n}\n\nexport default Entete\n","C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\components\\Maincon.js",["64","65"],"import React from 'react'\nimport Sidenav from './Sidenav'\nimport Displayer from './Displayer'\nimport Diagram from './Diagram'\nimport Tableview from './Tableview'\n\n\n\nconst Maincon = () => {\n  return (\n    \n    <div className=\"showcase\">\n      <Sidenav/>\n      <Displayer/>\n    </div>\n\n  )\n}\n\nexport default Maincon\n","C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\components\\Sidenav.js",["66","67","68"],"import React, {useState, useContext} from 'react'\nimport {LinkContext} from '../Contexts/Linkcontext'\n\n\nconst Sidenav = () => {\n  const {value1, value2} = useContext(LinkContext);\n\n  //il sagit de recuper une array de array de json pour les liens de ma barre de navigation\n  const navlinks = value1\n  const data = navlinks[0]\n\n\n  //pour pouvoir mettre a jour mon state a chaque fois que linfo change\n\n  const [clicked, setClicked] = value2\n\n\n  \n  //recuperer dans une variable le nom du lien pour lutilliser pour recuperer les tables\n  \n  const handleClick = (e) =>{\n    //console.log(e.target.getAttribute('value'));\n     var appuie = e.target.getAttribute('value');\n\n     setClicked(appuie);\n\n    };\n\n   return (\n    <div className= \"navbar\">\n      <nav>\n        <h1>DATABASE TABLES</h1>\n      <ul>\n        {data.map((lien, index) =>( \n       <li key={index}><a className=\"lien\" href=\"#\" value={lien.table_name} onClick={handleClick}>{lien.table_name}</a></li>\n        ))};\n        </ul>\n         {/*<Displayer clicked ={clicked}/> */ }\n      </nav>\n    </div>\n  )\n}\n\nexport default Sidenav\n","C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\components\\Displayer.js",[],"C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\Contexts\\Linkcontext.js",[],"C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\components\\Diagram.js",[],"C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\Contexts\\Modalcontext.js",[],"C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\components\\Connect.js",["69","70"],"import React, {useState, useContext} from 'react'\r\nimport {Modalcontext} from '../Contexts/Modalcontext'\r\n\r\n\r\nconst Connect = () => {\r\n  const [showModal, setShowModal] = useContext(Modalcontext)\r\n\r\n  /* //data de mon formulaire\r\n  const  [data, setData] = useState({\r\n    user: \"\",\r\n    host:\"\",\r\n    dbname:\"\",\r\n    password:\"\",\r\n    port:\"\"\r\n  })\r\n\r\n\r\n\r\n   const postData = async(url = 'http://localhost:5000/api/submit', donnee={data}) =>{\r\n       \r\n    // Default options are marked with *\r\n    const response = await fetch(url, {\r\n      method: 'POST', \r\n      mode: 'cors', \r\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: 'same-origin', \r\n      headers: {\r\n        'Content-Type': 'application/json'  \r\n      },\r\n      redirect: 'follow', // manual, *follow, error\r\n      referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n      body: JSON.stringify(donnee) // body data type must match \"Content-Type\" header\r\n    });\r\n    return response.json(); // parses JSON response into native JavaScript objects\r\n  }\r\n  \r\n  postData('http://localhost:5000/api/submit', { answer: data})\r\n    .then(data => {\r\n      console.log(data); // JSON data parsed by `data.json()` call\r\n    });\r\n\r\n\r\n    const handle = (e) =>{\r\n      const newData = {... data}\r\n\r\n      Here i'm getting the id of the event that got fired and then setting it to it value \r\n      newData[e.target.id] = e.target.value\r\n      */\r\n\r\n      /*Now i.m updating my state \r\n      setData(newData)\r\n      console.log(newData)\r\n    }\r\n*/\r\n  \r\n\r\n  return (\r\n    <>\r\n    {showModal ?\r\n    <div className=\"modal-container\" >\r\n  {/*}  <form className=\"connect\" onSubmit={(e)=> postData(e)}>\r\n      <div className=\"head\">\r\n        <h1>Se Connecter</h1>\r\n      </div>\r\n    \r\n    <div className=\"items\">\r\n      <div className=\"item\">\r\n        <label htmlFor=\"user\">Database User:</label>\r\n        <input type=\"text\" onChange={(e) =>handle(e)} id=\"user\" value={data.user}/>\r\n      </div>\r\n      <div className=\"item\">\r\n        <label htmlFor=\"dbhost\">Database Host:</label>\r\n        <input type=\"text\"  onChange={(e) =>handle(e)} id=\"host\" value={data.host}/>\r\n      </div>\r\n      <div className=\"item\">\r\n        <label htmlFor=\"dbname\">Database Name:</label>\r\n        <input type=\"text\"  onChange={(e) =>handle(e)} id=\"dbname\" value={data.dbname}/>\r\n      </div>\r\n\r\n      <div className=\"item\">\r\n        <label htmlFor=\"password\">Password:</label>\r\n        <input type=\"password\"  onChange={(e) =>handle(e)} id=\"password\" value={data.password}/>\r\n      </div>\r\n      <div className=\"item\">\r\n        <label htmlFor=\"port\">Port Number:</label>\r\n        <input type=\"text\"  onChange={(e) =>handle(e)} id=\"port\" value={data.port}/>\r\n      </div>\r\n    </div>\r\n    <div className=\"submit\">\r\n      <button type=\"submit\" onClick={postData}>Connecter</button>\r\n    </div>\r\n    </form> {*/}\r\n  </div>: null}\r\n    </>\r\n\r\n  )\r\n}\r\n\r\n\r\nexport default Connect\r\n","C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\components\\Tableview.js",["71","72"],"import React, {useState , useEffect, useContext} from 'react'\r\nimport {LinkContext} from '../Contexts/Linkcontext'\r\n\r\n\r\n\r\nconst Tableview = () => {\r\n/*Section pour recuperer la table demander */\r\n\r\nconst {value2} = useContext(LinkContext);\r\n\r\n//pour pouvoir mettre a jour mon state a chaque fois que linfo change\r\n\r\nconst [clicked, setClicked] = value2\r\n\r\n//console.log(clicked)\r\n\r\n\r\n  const [table, setTable] = useState([])\r\n  //console.log(table)\r\n\r\n\r\n  \r\n  //for the button click in the link i want the value here so that i could pass it to other component\r\n  \r\n  const getTable = async () =>{\r\n    try {\r\n      \r\n      const res = await fetch(`http://localhost:5000/api/fullsend/${clicked}`);\r\n      const jsonres = await res.json();\r\n      //console.log(jsonres)\r\n      setTable(jsonres)\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  }\r\n  \r\n  //useEffect in order to fetch the data by calling a function\r\n  useEffect(() =>{\r\n    getTable()\r\n  },[clicked]);\r\n  \r\n  /*ici on va utilliser linformation recu sous format json de notre api et cre un tableau */\r\n\r\n  /*Entete de ma table */\r\n\r\n  const columnHeader = [\"name\",\"notnull\",\"type\",\"primarykey\",\"uniquekey\",\"foreignkey\"]\r\n\r\nconst generateHeader = () =>{\r\n\r\n  let result =[];\r\n  for(var i = 0; i < columnHeader.length; i++){\r\n     result.push(<th id={columnHeader[i]}>{columnHeader[i]}</th>)\r\n  }\r\n  return result;\r\n}\r\n\r\n\r\n/*Contenu de mes tables */\r\nconst collectData = () =>{\r\n\r\n  let result = [];\r\n\r\n  for(var i=0 ; i< table.length; i++){\r\n       \r\n    var val = table[i];\r\n  \r\n    console.log(val)\r\n    result.push(\r\n      <tr key={i}>\r\n        <td>{val.name}</td>\r\n        <td>{val.notnull}</td>\r\n        <td>{val.type}</td>\r\n        <td>{val.primarykey}</td>\r\n        <td>{val.uniquekey}</td>\r\n        <td>{val.foreignkey}</td>\r\n      </tr>\r\n    )\r\n  }\r\n  return result;\r\n\r\n}\r\n\r\n\r\n  return (\r\n    <div className=\"tableview\">\r\n      <h3>You are currently viewing the <span className=\"clicked\">{clicked}</span> table structure</h3>\r\n      <table className=\"table\">\r\n        <thead className=\"tablehead\">\r\n          <tr className=\"tablerow\">{generateHeader()}</tr>\r\n        </thead>\r\n        <tbody className=\"tablebody\">\r\n      \r\n           {collectData()}\r\n  \r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tableview\r\n","C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\components\\Mininav.js",[],"C:\\Users\\MEGBLETO\\Desktop\\GuiTool\\frontend\\src\\components\\Diholder.js",["73"],"import React, {useState, useEffect}  from 'react'\r\n\r\n\r\n\r\nconst Diholder = ({tablearray})=> { \r\n\r\n\r\n  /*ici je recuper ma liste de table */\r\n  const tablesArray  = tablearray\r\n//console.log(tablesArray)\r\n\r\n\r\nconst [table, setTable]= useState([])\r\n\r\nconsole.log(table)\r\nconst getEachTable = async () =>{\r\n  try {\r\n\r\n    const tables = await Promise.all(\r\n      tablesArray.map(async (table)=>{\r\n          const res= await fetch(`http://localhost:5000/api/fullsend/${table}`)\r\n      return await res.json();\r\n        }))\r\n  \r\n      setTable(tables) \r\n     // console.log(tables)  \r\n   \r\n }catch(error) {\r\n    console.log(error.message)\r\n  }\r\n   \r\n}\r\n\r\nuseEffect(() => {\r\n  console.log(\"i fire once\")\r\n getEachTable()\r\n},[tablesArray]);\r\n\r\n\r\n/*A partir d'ici je veux afficher linformation */\r\n\r\n  /*Entete de ma table */\r\n\r\n  const columnHeader = [\"name\",\"primarykey\",\"foreignkey\"]\r\n\r\n\r\n  const generateHeader = () =>{\r\n\r\n    let result =[];\r\n    for(var i = 0; i < columnHeader.length; i++){\r\n       result.push(<th id={columnHeader[i]}>{columnHeader[i]}</th>)\r\n    }\r\n    return result;\r\n  }\r\n  \r\n\r\n\r\n  return (\r\n<div className=\"diholder\">\r\n\r\n{ table.map((tab, index) =>(\r\n <table key={index} className=\"tabled\">\r\n <thead className=\"tableheadd\">\r\n   <tr className=\"tablerowdd\"></tr>\r\n    <tr className=\"tablerowdd\"> {generateHeader()}</tr>\r\n </thead>\r\n   {tab.map((tabledetails) =>{\r\n     return  <tbody className=\"tablebodyd\">\r\n    <tr>\r\n        <td id={tabledetails.name}>{tabledetails.name}</td>\r\n        <td id={tabledetails.primarykey}>{tabledetails.primarykey}</td>\r\n        <td id={tabledetails.foreignkey}>{tabledetails.foreignkey}</td>\r\n      </tr>\r\n   </tbody>\r\n   })}\r\n</table>\r\n))}\r\n</div>\r\n  )\r\n  }\r\n\r\nexport default Diholder\r\n",{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":8,"column":10,"nodeType":"80","messageId":"81","endLine":8,"endColumn":19},{"ruleId":"78","severity":1,"message":"82","line":4,"column":8,"nodeType":"80","messageId":"81","endLine":4,"endColumn":15},{"ruleId":"78","severity":1,"message":"83","line":5,"column":8,"nodeType":"80","messageId":"81","endLine":5,"endColumn":17},{"ruleId":"78","severity":1,"message":"84","line":1,"column":16,"nodeType":"80","messageId":"81","endLine":1,"endColumn":24},{"ruleId":"78","severity":1,"message":"85","line":15,"column":10,"nodeType":"80","messageId":"81","endLine":15,"endColumn":17},{"ruleId":"86","severity":1,"message":"87","line":35,"column":24,"nodeType":"88","endLine":35,"endColumn":99},{"ruleId":"78","severity":1,"message":"84","line":1,"column":16,"nodeType":"80","messageId":"81","endLine":1,"endColumn":24},{"ruleId":"78","severity":1,"message":"89","line":6,"column":21,"nodeType":"80","messageId":"81","endLine":6,"endColumn":33},{"ruleId":"78","severity":1,"message":"90","line":13,"column":17,"nodeType":"80","messageId":"81","endLine":13,"endColumn":27},{"ruleId":"91","severity":1,"message":"92","line":40,"column":5,"nodeType":"93","endLine":40,"endColumn":14,"suggestions":"94"},{"ruleId":"91","severity":1,"message":"95","line":37,"column":3,"nodeType":"93","endLine":37,"endColumn":16,"suggestions":"96"},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"no-unused-vars","'showModal' is assigned a value but never used.","Identifier","unusedVar","'Diagram' is defined but never used.","'Tableview' is defined but never used.","'useState' is defined but never used.","'clicked' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'setShowModal' is assigned a value but never used.","'setClicked' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTable'. Either include it or remove the dependency array.","ArrayExpression",["99"],"React Hook useEffect has a missing dependency: 'getEachTable'. Either include it or remove the dependency array.",["100"],"no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},"Update the dependencies array to be: [clicked, getTable]",{"range":"105","text":"106"},"Update the dependencies array to be: [getEachTable, tablesArray]",{"range":"107","text":"108"},[972,981],"[clicked, getTable]",[717,730],"[getEachTable, tablesArray]"]